package com.example.kafkademo;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class ProcessBuilderExecutor {

	public List<String> execute(String directory, String command) {
        List<String> commands = new ArrayList<>();
        commands.add("bash");
        commands.add("-c");
        commands.add(command);
        Process dockerComposeCommand;

        ProcessBuilder builder = new ProcessBuilder();
        builder.command(commands);
        builder.directory(new File(directory).getParentFile());
        String path = System.getenv("PATH");
        builder.environment().put("PATH","/usr/bin:"+path);
        builder.redirectErrorStream(true);
        builder.redirectError(ProcessBuilder.Redirect.INHERIT);

        List<String> result = new ArrayList<>();
        try {
            dockerComposeCommand = builder.start();
            dockerComposeCommand.waitFor();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dockerComposeCommand.getInputStream()))) {
                String line = reader.readLine();
                while (line != null) {
                    result.add(line);
                    line = reader.readLine();
                }
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
        return result;
    }
	
	public static void main(String[] args) {
		
		ProcessBuilderExecutor pbe = new ProcessBuilderExecutor();
		
		try {
			
			List<String> result = pbe.execute("C:/Workspace/STS/kafkademo/src/test/resources/docker-compose.yml","docker-compose up");
			System.out.println(result.toString());
			result = pbe.execute("C:/Workspace/STS/kafkademo/src/test/resources/docker-compose.yml","docker-compose down");
			System.out.println(result.toString());
		} catch (Exception e) {
			
			e.printStackTrace();
			//pbe.execute("/kafkademo/src/test/resources/","docker-compose kill");
		}
	}
}
